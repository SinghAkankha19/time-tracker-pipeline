trigger: none

pool:
  name: 'Default'

variables:
  organization: 'adiraazad180822'
  project: 'ADO'
  branch: 'refs/heads/main'

steps:
- task: PowerShell@2
  displayName: 'Get pipeline runs between 7AM and 8AM'
  inputs:
    pwsh: true
    targetType: 'inline'  # This is required!
    script: |
      $ErrorActionPreference = 'Stop'

      $localTimeZoneOffset = (Get-TimeZone).BaseUtcOffset.TotalHours
      $now = Get-Date
      $today = $now.Date
      $startTimeLocal = $today.AddHours(19)  # 7 PM
      $endTimeLocal = $today.AddHours(20)    # 8 PM

      $startTime = $startTimeLocal.ToUniversalTime().ToString("o")
      $endTime = $endTimeLocal.ToUniversalTime().ToString("o")

      Write-Host "üîç Querying runs between $startTimeLocal (7PM) and $endTimeLocal (8PM) Local Time"
      Write-Host "üåç Converted to UTC: $startTime to $endTime"

      $organization = "$(organization)"
      $project = "$(project)"
      $branch = "$(branch)"
      $token = "$(System.AccessToken)"

      $url = "https://dev.azure.com/$organization/$project/_apis/build/builds?minTime=$startTime&maxTime=$endTime&branchName=$branch&api-version=7.1-preview.7"

      Write-Host "Calling Azure DevOps REST API:"
      Write-Host $url

      $headers = @{
        Authorization = "Bearer $token"
      }

      try {
        $response = Invoke-RestMethod -Uri $url -Headers $headers -Method Get

        if ($response.count -eq 0) {
          Write-Host "‚ùå No pipeline runs found in this time window."
        } else {
          Write-Host "‚úÖ Pipelines run between 7AM-8AM:"
         $response.value | ForEach-Object {
          $pipelineName = $_.definition.name
          $runTimeUtc = [datetime]$_.startTime
          $runTimeIST = $runTimeUtc.AddHours(5.5)  # Convert UTC ‚Üí IST (UTC+5:30)

          Write-Host "- $pipelineName at $runTimeIST (IST)"
          $lines += "- $pipelineName at $runTimeIST (IST)"
       }

        }
      } catch {
        Write-Host "‚ùå Failed to call Azure DevOps API: $_"
      }
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
# üì§ Publish the output file so it‚Äôs downloadable from the pipeline run
- task: PublishBuildArtifacts@1
  displayName: 'üì¶ Publish pipeline run results'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'pipeline-report'
    publishLocation: 'Container'
