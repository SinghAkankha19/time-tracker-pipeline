trigger: none

pool:
  name: 'Default'

schedules:
- cron: "35 2 * * 4"  # Every Thursday at 2:35 AM UTC (8:05 AM IST)
  displayName: Weekly Thursday 8:05 AM IST
  branches:
    include:
    - main
  always: true

variables:
  organization: 'adiraazad180822'
  project: 'ADO'
  branch: 'refs/heads/main'

steps:
# Step 1: Set report date as a pipeline variable
- task: PowerShell@2
  displayName: 'Set report date variable'
  inputs:
    pwsh: true
    targetType: 'inline'
    script: |
      $reportDate = Get-Date -Format "yyyy-MM-dd"
      Write-Host "Setting report date to $reportDate"
      Write-Host "##vso[task.setvariable variable=ReportDate]$reportDate"

# Step 2: Get pipeline runs between 7 AM and 8 AM IST
- task: PowerShell@2
  displayName: 'Generate pipeline_runs.md report'
  inputs:
    pwsh: true
    targetType: 'inline'
    script: |
      $ErrorActionPreference = 'Stop'

      $now = Get-Date
      $today = $now.Date
      $startTimeLocal = $today.AddHours(7)
      $endTimeLocal = $today.AddHours(8)

      $startTimeUtc = $startTimeLocal.AddHours(-5.5)
      $endTimeUtc = $endTimeLocal.AddHours(-5.5)

      $startTime = $startTimeUtc.ToString("o")
      $endTime = $endTimeUtc.ToString("o")

      Write-Host "Querying pipeline runs between $startTimeLocal and $endTimeLocal IST"
      Write-Host "Converted to UTC: $startTime to $endTime"

      $organization = "$(organization)"
      $project = "$(project)"
      $branch = "$(branch)"
      $token = "$(System.AccessToken)"

      $url = "https://dev.azure.com/$organization/$project/_apis/build/builds?minTime=$startTime&maxTime=$endTime&branchName=$branch&api-version=7.1-preview.7"
      $headers = @{ Authorization = "Bearer $token" }

      $reportFolder = "$(Build.ArtifactStagingDirectory)\reports\$(ReportDate)"
      New-Item -ItemType Directory -Force -Path $reportFolder | Out-Null
      $outputFile = "$reportFolder\pipeline_runs.md"
      $lines = @()

      try {
        $response = Invoke-RestMethod -Uri $url -Headers $headers -Method Get

        if ($response.count -eq 0) {
          $lines += "No pipeline runs found between $startTimeLocal and $endTimeLocal (IST)"
        } else {
          $lines += "### Pipeline runs between 7AM and 8AM IST ($(ReportDate)):"
          $found = $false

          $response.value | ForEach-Object {
            $pipelineName = $_.definition.name
            $runTimeUtc = [datetime]$_.startTime
            $runTimeIST = $runTimeUtc.AddHours(5.5)

            if ($runTimeIST -ge $startTimeLocal -and $runTimeIST -lt $endTimeLocal) {
              $lines += "- $pipelineName at $runTimeIST (IST)"
              $found = $true
            }
          }

          if (-not $found) {
            $lines += "No qualifying pipeline runs found in the exact 7AM–8AM IST window."
          }
        }

        $lines | Out-File -FilePath $outputFile -Encoding utf8
        Write-Host "Report saved to: $outputFile"

      } catch {
        Write-Host "Failed to call Azure DevOps API: $_"
        "Error: $_" | Out-File -FilePath $outputFile -Encoding utf8
      }

  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
- task: PowerShell@2
  displayName: 'Verify report file exists'
  inputs:
    pwsh: true
    targetType: 'inline'
    script: |
      $file = "$(Build.ArtifactStagingDirectory)\pipeline_runs.md"
      Write-Host "Looking for file: $file"
      if (Test-Path $file) {
        Write-Host "✅ Found report"
      } else {
        Write-Host "❌ File not found!"
        exit 1
      }

- task: PublishPipelineArtifact@1
  displayName: 'Publish pipeline_runs.md'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)\pipeline_runs.md'
    artifact: 'pipeline-report-markdown'

# Step 3: Copy markdown file to root of staging directory
- task: PowerShell@2
  displayName: 'Prepare report file for artifact publishing'
  inputs:
    pwsh: true
    targetType: 'inline'
    script: |
      $src = "$(Build.ArtifactStagingDirectory)\reports\$(ReportDate)\pipeline_runs.md"
      $dest = "$(Build.ArtifactStagingDirectory)\pipeline_runs.md"

      if (Test-Path $src) {
        Copy-Item $src $dest -Force
        Write-Host "Copied report to: $dest"
      } else {
        Write-Host "Report not found at $src"
        exit 1
      }

# Step 4: Publish only pipeline_runs.md as a Pipeline Artifact
- task: PublishPipelineArtifact@1
  displayName: 'Publish pipeline_runs.md as pipeline artifact'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)\pipeline_runs.md'
    artifact: 'pipeline-report-markdown'
